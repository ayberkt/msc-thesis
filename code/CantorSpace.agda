{-# OPTIONS --cubical --safe #-}

module CantorSpace where

open import Basis
open import Cubical.Core.Everything
open import Cubical.Relation.Nullary using (Discrete; yes; no; Dec; ¬¨_)
open import Cubical.Relation.Nullary.DecidableEq using (Discrete‚ÜíisSet)
open import Cubical.Data.Empty.Base  using (‚ä•; ‚ä•-elim)
open import Cubical.Data.Unit.Base   using (Unit; tt)
open import Cubical.Data.Bool.Base
open import Truncation
open import Poset
open import FormalTopology

data ùîπ : Type‚ÇÄ where
  true false : ùîπ

caseùîπ : {A : Type ‚Ñì} ‚Üí ùîπ ‚Üí A ‚Üí A ‚Üí A
caseùîπ true  x _ = x
caseùîπ false _ y = y

ùîπ-discrete : Discrete ùîπ
ùîπ-discrete true  true  = yes refl
ùîπ-discrete true  false = no (Œª p ‚Üí subst (Œª b ‚Üí caseùîπ b ùîπ ‚ä•) p false)
ùîπ-discrete false true  = no (Œª p ‚Üí subst (Œª b ‚Üí caseùîπ b ‚ä• ùîπ) p true)
ùîπ-discrete false false = yes refl

data ‚ÑÇ : Type‚ÇÄ where
  []  : ‚ÑÇ
  _‚å¢_ : ‚ÑÇ ‚Üí ùîπ ‚Üí ‚ÑÇ

case‚ÑÇ : {A : Type ‚Ñì} ‚Üí ‚ÑÇ ‚Üí A ‚Üí (ùîπ ‚Üí ‚ÑÇ ‚Üí A) ‚Üí A
case‚ÑÇ []       e c = e
case‚ÑÇ (xs ‚å¢ x) e c = c x xs

lemma : (xs ys : ‚ÑÇ) (x y : ùîπ) ‚Üí xs ‚å¢ x ‚â° ys ‚å¢ y ‚Üí xs ‚â° ys
lemma xs ys x y p = subst NTS (sym p) refl
  where
    NTS : ‚ÑÇ ‚Üí Type ‚Ñì-zero
    NTS []        = []  ‚â° ys
    NTS (xs‚Ä≤ ‚å¢ x) = xs‚Ä≤ ‚â° ys

lemma‚Ä≤ : (xs ys : ‚ÑÇ) (x y : ùîπ) ‚Üí xs ‚å¢ x ‚â° ys ‚å¢ y ‚Üí x ‚â° y
lemma‚Ä≤ xs ys x y p with ùîπ-discrete x y
lemma‚Ä≤ xs ys x y p | yes q = q
lemma‚Ä≤ xs ys x y p | no ¬¨q =  sym (subst {x = xs ‚å¢ x} {y = ys ‚å¢ y} NTS p refl)
  where
    NTS : ‚ÑÇ ‚Üí Type ‚Ñì-zero
    NTS []       = ‚ä•
    NTS (zs ‚å¢ z) = z ‚â° x

lemma2 : (xs : ‚ÑÇ) (x : ùîπ) ‚Üí ¬¨ ((xs ‚å¢ x) ‚â° [])
lemma2 xs x p = subst NTS p p
  where
    NTS : ‚ÑÇ ‚Üí Type ‚Ñì-zero
    NTS []       = ‚ä•
    NTS (ys ‚å¢ y) = (ys ‚å¢ y) ‚â° []

‚ÑÇ-discrete : Discrete ‚ÑÇ
‚ÑÇ-discrete [] [] = yes refl
‚ÑÇ-discrete [] (ys ‚å¢ y) = no Œª p ‚Üí lemma2 ys y (sym p)
‚ÑÇ-discrete (xs ‚å¢ x) [] = no Œª p ‚Üí lemma2 xs x p
‚ÑÇ-discrete (xs ‚å¢ x) (ys ‚å¢ y) with ùîπ-discrete x y
‚ÑÇ-discrete (xs ‚å¢ x) (ys ‚å¢ y) | yes p with ‚ÑÇ-discrete xs ys
‚ÑÇ-discrete (xs ‚å¢ x) (ys ‚å¢ y) | yes p | yes q = subst (Œª xs‚Ä≤ ‚Üí Dec (xs‚Ä≤ ‚å¢ x ‚â° ys ‚å¢ y)) (sym q) (subst (Œª x‚Ä≤ ‚Üí Dec (ys ‚å¢ x‚Ä≤ ‚â° ys ‚å¢ y)) (sym p) (yes refl))
‚ÑÇ-discrete (xs ‚å¢ x) (ys ‚å¢ y) | yes p | no ¬¨q = no Œª q ‚Üí ¬¨q (lemma xs ys x y q)
‚ÑÇ-discrete (xs ‚å¢ x) (ys ‚å¢ y) | no ¬¨p = no (Œª p ‚Üí ¬¨p (lemma‚Ä≤ xs ys x y p))

‚ÑÇ-set : IsSet ‚ÑÇ
‚ÑÇ-set = Discrete‚ÜíisSet ‚ÑÇ-discrete

infixl 5 _‚å¢_

_++_ : ‚ÑÇ ‚Üí ‚ÑÇ ‚Üí ‚ÑÇ
xs ++ []       = xs
xs ++ (ys ‚å¢ y) = (xs ++ ys) ‚å¢ y

++-left-id : (xs : ‚ÑÇ) ‚Üí [] ++ xs ‚â° xs
++-left-id [] = refl
++-left-id (xs ‚å¢ x) = cong (Œª - ‚Üí - ‚å¢ x) (++-left-id xs)

snoc-lemma : (xs ys : ‚ÑÇ) (x : ùîπ) ‚Üí (xs ‚å¢ x) ++ ys ‚â° xs ++ (([] ‚å¢ x) ++ ys)
snoc-lemma xs [] x = refl
snoc-lemma xs (ys ‚å¢ y) x = cong (Œª - ‚Üí - ‚å¢ y) (snoc-lemma xs ys x)

lemma3 : (xs : ‚ÑÇ) (ys : ‚ÑÇ) (y : ùîπ)  ‚Üí ¬¨ (xs ‚â° xs ++ (ys ‚å¢ y))
lemma3 [] ys y p = ‚ä•-elim (lemma2 ys y (ys ‚å¢ y ‚â°‚ü® sym (cong (Œª - ‚Üí - ‚å¢ y) (++-left-id ys)) ‚ü© ([] ++ ys) ‚å¢ y ‚â°‚ü® sym p ‚ü© [] ‚àé))
lemma3 (xs ‚å¢ x) [] y p = ‚ä•-elim (lemma3 xs [] x (lemma xs (xs ‚å¢ x) x y p))
lemma3 (xs ‚å¢ x) (ys ‚å¢ y) y‚Ä≤ p = ‚ä•-elim (lemma3 xs (([] ‚å¢ x) ++ ys) y bar)
  where
    foo : xs ‚â° ((xs ‚å¢ x) ++ ys) ‚å¢ y
    foo = lemma xs ((xs ‚å¢ x) ++ (ys ‚å¢ y)) x y‚Ä≤ p
    bar : xs ‚â° (xs ++ (([] ‚å¢ x) ++ ys)) ‚å¢ y
    bar = xs ‚â°‚ü® foo ‚ü© ((xs ‚å¢ x) ++ ys) ‚å¢ y ‚â°‚ü® snoc-lemma xs (ys ‚å¢ y) x ‚ü© (xs ++ (([] ‚å¢ x) ++ ys)) ‚å¢ y ‚àé

some-other-lemma : (xs : ‚ÑÇ) (y : ùîπ) ‚Üí ¬¨ (xs ‚â° (xs ‚å¢ y))
some-other-lemma [] y p = subst NTS p tt
  where
    NTS : ‚ÑÇ ‚Üí Type ‚Ñì-zero
    NTS []       = Unit
    NTS (x ‚å¢ xs) = ‚ä•
some-other-lemma (xs ‚å¢ x) y p = ‚ä•-elim (some-other-lemma xs x (lemma xs (xs ‚å¢ x) x y p))

lemma3‚Ä≤ : (xs ys : ‚ÑÇ) (y : ùîπ) ‚Üí ¬¨ (xs ‚â° (xs ‚å¢ y) ++ ys)
lemma3‚Ä≤ [] [] y p = subst NTS p tt
  where
    NTS : ‚ÑÇ ‚Üí Type ‚Ñì-zero
    NTS []       = Unit
    NTS (xs ‚å¢ x) = ‚ä•
lemma3‚Ä≤ [] (ys ‚å¢ _) y p = subst NTS p tt
  where
    NTS : ‚ÑÇ ‚Üí Type ‚Ñì-zero
    NTS []       = Unit
    NTS (xs ‚å¢ x) = ‚ä•
lemma3‚Ä≤ (xs ‚å¢ x) [] y p = ‚ä•-elim (some-other-lemma xs x (lemma xs (xs ‚å¢ x) x y p))
lemma3‚Ä≤ (xs ‚å¢ x) (ys ‚å¢ y) y‚Ä≤ p = ‚ä•-elim (lemma3‚Ä≤ xs (([] ‚å¢ y‚Ä≤) ++ ys) x bar)
  where
    foo : xs ‚â° (((xs ‚å¢ x) ++ ([] ‚å¢ y‚Ä≤)) ++ ys)
    foo = lemma xs ((xs ‚å¢ x ‚å¢ y‚Ä≤) ++ ys) x y p
    bar : xs ‚â° (xs ‚å¢ x) ++ (([] ‚å¢ y‚Ä≤) ++ ys)
    bar = xs ‚â°‚ü® foo ‚ü© ((((xs ‚å¢ x) ++ ([] ‚å¢ y‚Ä≤)) ++ ys)) ‚â°‚ü® snoc-lemma ((xs ‚å¢ x) ++ []) ys y‚Ä≤ ‚ü© ((xs ‚å¢ x) ++ (([] ‚å¢ y‚Ä≤) ++ ys)) ‚àé

[]-left-id : (xs : ‚ÑÇ) ‚Üí [] ++ xs ‚â° xs
[]-left-id []       = refl
[]-left-id (xs ‚å¢ x) = cong (Œª - ‚Üí - ‚å¢ x) ([]-left-id xs)

assoc : (xs ys zs : ‚ÑÇ) ‚Üí xs ++ (ys ++ zs) ‚â° (xs ++ ys) ++ zs
assoc xs ys []       = refl
assoc xs ys (zs ‚å¢ z) = cong (Œª - ‚Üí - ‚å¢ z) (assoc xs ys zs)

++-lemma : (xs ys zs‚ÇÄ zs‚ÇÅ : ‚ÑÇ) ‚Üí xs ‚â° ys ++ zs‚ÇÄ ‚Üí xs ‚â° ys ++ zs‚ÇÅ ‚Üí zs‚ÇÄ ‚â° zs‚ÇÅ
++-lemma [] [] zs‚ÇÄ zs‚ÇÅ p q = zs‚ÇÄ ‚â°‚ü® sym (++-left-id zs‚ÇÄ) ‚ü© [] ++ zs‚ÇÄ ‚â°‚ü® sym p ‚ü© [] ‚â°‚ü® q ‚ü© [] ++ zs‚ÇÅ ‚â°‚ü® ++-left-id zs‚ÇÅ ‚ü© zs‚ÇÅ ‚àé
++-lemma [] (ys ‚å¢ y) [] [] p q = refl
++-lemma [] (ys ‚å¢ y) [] (zs‚ÇÅ ‚å¢ x) p q = ‚ä•-elim (lemma2 ys y (sym p))
++-lemma [] (ys ‚å¢ y) (zs‚ÇÄ ‚å¢ x) [] p q = ‚ä•-elim (lemma2 ys y (sym q))
++-lemma [] (ys ‚å¢ y) (zs‚ÇÄ ‚å¢ x) (zs‚ÇÅ ‚å¢ x‚ÇÅ) p q = ‚ä•-elim (lemma2 ((ys ‚å¢ y) ++ zs‚ÇÄ) x (sym p))
++-lemma (xs ‚å¢ x) [] [] zs‚ÇÅ p q = ‚ä•-elim (lemma2 xs x p)
++-lemma (xs ‚å¢ x) [] (zs‚ÇÄ ‚å¢ z‚ÇÄ) [] p q = ‚ä•-elim (lemma2 xs x q)
++-lemma (xs ‚å¢ x) [] (zs‚ÇÄ ‚å¢ z‚ÇÄ) (zs‚ÇÅ ‚å¢ z‚ÇÅ) p q =
  zs‚ÇÄ ‚å¢ z‚ÇÄ         ‚â°‚ü® cong (Œª - ‚Üí - ‚å¢ z‚ÇÄ) (sym (++-left-id zs‚ÇÄ)) ‚ü©
  ([] ++ zs‚ÇÄ) ‚å¢ z‚ÇÄ ‚â°‚ü® sym p ‚ü©
  xs ‚å¢ x           ‚â°‚ü® q ‚ü©
  ([] ++ zs‚ÇÅ) ‚å¢ z‚ÇÅ ‚â°‚ü® cong (Œª - ‚Üí - ‚å¢ z‚ÇÅ) (++-left-id zs‚ÇÅ) ‚ü©
  zs‚ÇÅ ‚å¢ z‚ÇÅ         ‚àé
++-lemma (xs ‚å¢ x) (ys ‚å¢ y) [] [] p q = refl
++-lemma (xs ‚å¢ x) (ys ‚å¢ y) [] (zs‚ÇÅ ‚å¢ z‚ÇÅ) p q = ‚ä•-elim (lemma3‚Ä≤ ys zs‚ÇÅ y (lemma ys ((ys ‚å¢ y) ++ zs‚ÇÅ) y z‚ÇÅ NTS))
  where
    NTS : ys ‚å¢ y ‚â° ((ys ‚å¢ y) ++ zs‚ÇÅ) ‚å¢ z‚ÇÅ
    NTS = ys ‚å¢ y ‚â°‚ü® sym p ‚ü© xs ‚å¢ x ‚â°‚ü® q ‚ü© ((ys ‚å¢ y) ++ zs‚ÇÅ) ‚å¢ z‚ÇÅ ‚àé
++-lemma (xs ‚å¢ x) (ys ‚å¢ y) (zs‚ÇÄ ‚å¢ z‚ÇÄ) [] p q = ‚ä•-elim (lemma3‚Ä≤ ys zs‚ÇÄ y (lemma ys ((ys ‚å¢ y) ++ zs‚ÇÄ) y z‚ÇÄ NTS))
  where
    NTS : ys ‚å¢ y ‚â° ((ys ‚å¢ y) ++ zs‚ÇÄ) ‚å¢ z‚ÇÄ
    NTS = ys ‚å¢ y ‚â°‚ü® sym q ‚ü© xs ‚å¢ x ‚â°‚ü® p ‚ü© ((ys ‚å¢ y) ++ (zs‚ÇÄ ‚å¢ z‚ÇÄ)) ‚àé
++-lemma (xs ‚å¢ x) (ys ‚å¢ y) (zs‚ÇÄ ‚å¢ z‚ÇÄ) (zs‚ÇÅ ‚å¢ z‚ÇÅ) p q with ùîπ-discrete z‚ÇÄ z‚ÇÅ
++-lemma (xs ‚å¢ x) (ys ‚å¢ y) (zs‚ÇÄ ‚å¢ z‚ÇÄ) (zs‚ÇÅ ‚å¢ z‚ÇÅ) p q | yes z‚ÇÄ=z‚ÇÅ = zs‚ÇÄ ‚å¢ z‚ÇÄ ‚â°‚ü® cong (Œª - ‚Üí - ‚å¢ z‚ÇÄ) IH ‚ü© zs‚ÇÅ ‚å¢ z‚ÇÄ ‚â°‚ü® cong (_‚å¢_ zs‚ÇÅ) z‚ÇÄ=z‚ÇÅ ‚ü© zs‚ÇÅ ‚å¢ z‚ÇÅ ‚àé
  where
    foo : xs ‚â° (ys ‚å¢ y) ++ zs‚ÇÅ
    foo = lemma xs ((ys ‚å¢ y) ++ zs‚ÇÅ) x z‚ÇÅ q
    bar : xs ‚â° (ys ‚å¢ y) ++ zs‚ÇÄ
    bar = lemma xs ((ys ‚å¢ y) ++ zs‚ÇÄ) x z‚ÇÄ p
    IH : zs‚ÇÄ ‚â° zs‚ÇÅ
    IH = ++-lemma xs (ys ‚å¢ y) zs‚ÇÄ zs‚ÇÅ bar foo
++-lemma (xs ‚å¢ x) (ys ‚å¢ y) (zs‚ÇÄ ‚å¢ z‚ÇÄ) (zs‚ÇÅ ‚å¢ z‚ÇÅ) p q | no ¬¨p = ‚ä•-elim (¬¨p (lemma‚Ä≤ ((ys ‚å¢ y) ++ zs‚ÇÄ) ((ys ‚å¢ y) ++ zs‚ÇÅ) z‚ÇÄ z‚ÇÅ (((ys ‚å¢ y) ++ zs‚ÇÄ) ‚å¢ z‚ÇÄ ‚â°‚ü® sym p ‚ü© xs ‚å¢ x ‚â°‚ü® q ‚ü© ((ys ‚å¢ y) ++ zs‚ÇÅ) ‚å¢ z‚ÇÅ ‚àé)))

_‚â§_ : ‚ÑÇ ‚Üí ‚ÑÇ ‚Üí hProp ‚Ñì-zero
xs ‚â§ ys = (Œ£[ zs ‚àà ‚ÑÇ ] xs ‚â° ys ++ zs) , prop
  where
    prop : IsProp (Œ£[ zs ‚àà ‚ÑÇ ] xs ‚â° ys ++ zs)
    prop (zs‚ÇÄ , p) (zs‚ÇÅ , q) = to-subtype-‚â° (zs‚ÇÄ , p) (zs‚ÇÅ , q) (Œª ws ‚Üí ‚ÑÇ-set xs (ys ++ ws)) (++-lemma xs ys zs‚ÇÄ zs‚ÇÅ p q)

cantor-poset : Poset ‚Ñì-zero ‚Ñì-zero
cantor-poset = ‚ÑÇ , ((_‚â§_ , ‚ÑÇ-set) , (‚â§-refl , ‚â§-trans , ‚â§-antisym))
  where
    ‚â§-refl : (xs : ‚ÑÇ) ‚Üí xs ‚â§ xs is-true
    ‚â§-refl xs = [] , refl
    ‚â§-trans : (xs ys zs : ‚ÑÇ) ‚Üí xs ‚â§ ys is-true ‚Üí ys ‚â§ zs is-true ‚Üí xs ‚â§ zs is-true
    ‚â§-trans xs ys zs xs‚â§ys ys‚â§zs = NTS xs‚â§ys ys‚â§zs
      where
        NTS : Œ£[ as ‚àà ‚ÑÇ ] xs ‚â° ys ++ as ‚Üí Œ£[ bs ‚àà ‚ÑÇ ] ys ‚â° zs ++ bs ‚Üí xs ‚â§ zs is-true
        NTS (as , p) (bs , q) = (bs ++ as) , NTS‚Ä≤
          where
            NTS‚Ä≤ : xs ‚â° (zs ++ (bs ++ as))
            NTS‚Ä≤ = xs ‚â°‚ü® p ‚ü© (ys ++ as) ‚â°‚ü® cong (Œª - ‚Üí - ++ as) q ‚ü© ((zs ++ bs) ++ as) ‚â°‚ü® sym (assoc zs bs as) ‚ü© (zs ++ (bs ++ as)) ‚àé
    ‚â§-antisym : (xs ys : ‚ÑÇ) ‚Üí xs ‚â§ ys is-true ‚Üí ys ‚â§ xs is-true ‚Üí xs ‚â° ys
    ‚â§-antisym xs ys xs‚â§ys ys‚â§xs = NTS xs‚â§ys ys‚â§xs
      where
        NTS : Œ£[ as ‚àà ‚ÑÇ ] xs ‚â° ys ++ as ‚Üí Œ£[ bs ‚àà ‚ÑÇ ] ys ‚â° xs ++ bs ‚Üí xs ‚â° ys
        NTS ([] , p) ([] , q) = p
        NTS ([] , p) (bs ‚å¢ x , q) = p
        NTS (as ‚å¢ x , p) ([] , q) = sym q
        NTS (as ‚å¢ a , p) (bs ‚å¢ b  , q) = ‚ä•-elim (lemma3 xs ((bs ‚å¢ b) ++ as) a NTS‚Ä≤)
          where
            NTS‚Ä≤ : xs ‚â° xs ++ ((bs ‚å¢ b) ++ (as ‚å¢ a))
            NTS‚Ä≤ = xs                           ‚â°‚ü® p                                ‚ü©
                   ys ++ (as ‚å¢ a)               ‚â°‚ü® cong (Œª - ‚Üí - ++ (as ‚å¢ a)) q     ‚ü©
                   (xs ++ (bs ‚å¢ b)) ++ (as ‚å¢ a) ‚â°‚ü® sym (assoc xs (bs ‚å¢ b) (as ‚å¢ a)) ‚ü©
                   xs ++ ((bs ‚å¢ b) ++ (as ‚å¢ a)) ‚àé

Œ¶ : (xs ys : ‚ÑÇ) (x y : ùîπ) ‚Üí (xs ‚å¢ x) ‚â§ (ys ‚å¢ y) is-true ‚Üí xs ‚â§ ys is-true
Œ¶ xs ys x y ([] , p) = [] , (lemma xs ys x y p)
Œ¶ xs ys x y (zs ‚å¢ z , p) = (([] ‚å¢ y) ++ zs) , (xs ‚â°‚ü® lemma xs ((ys ‚å¢ y) ++ zs) x z p ‚ü© ((ys ‚å¢ y) ++ zs) ‚â°‚ü® snoc-lemma ys zs y ‚ü© ys ++ (([] ‚å¢ y) ++ zs) ‚àé)

[]-lemma : (xs ys : ‚ÑÇ) ‚Üí [] ‚â° (xs ++ ys) ‚Üí xs ‚â° []
[]-lemma [] [] p = refl
[]-lemma [] (ys ‚å¢ x‚ÇÅ) p = refl
[]-lemma (xs ‚å¢ x) [] p = ‚ä•-elim (lemma2 xs x (sym p))
[]-lemma (xs ‚å¢ x) (ys ‚å¢ y) p = subst NTS p tt
  where
    NTS : ‚ÑÇ ‚Üí Type ‚Ñì-zero
    NTS []       = Unit
    NTS (zs ‚å¢ z) = (xs ‚å¢ x) ‚â° []

nonempty : ‚ÑÇ ‚Üí Type ‚Ñì-zero
nonempty []       = ‚ä•
nonempty (xs ‚å¢ x) = Unit

head : (xs : ‚ÑÇ) ‚Üí nonempty xs ‚Üí ùîπ
head ([] ‚å¢ x) p = x
head ((xs ‚å¢ x‚Ä≤) ‚å¢ x) p = head (xs ‚å¢ x‚Ä≤) tt

tail : (xs : ‚ÑÇ) ‚Üí nonempty xs ‚Üí ‚ÑÇ
tail ([] ‚å¢ x) tt = []
tail (xs ‚å¢ x‚ÇÄ ‚å¢ x‚ÇÅ) p = (tail (xs ‚å¢ x‚ÇÄ) tt) ‚å¢ x‚ÇÅ

hd-tl-lemma : (xs : ‚ÑÇ) ‚Üí (ne : nonempty xs) ‚Üí ([] ‚å¢ (head xs ne)) ++ (tail xs ne) ‚â° xs
hd-tl-lemma ([] ‚å¢ x) tt = refl
hd-tl-lemma (xs ‚å¢ x‚ÇÄ ‚å¢ x‚ÇÅ) tt = cong (Œª - ‚Üí - ‚å¢ x‚ÇÅ) (hd-tl-lemma (xs ‚å¢ x‚ÇÄ) tt)

cantor : FormalTopology ‚Ñì-zero ‚Ñì-zero
cantor = (cantor-poset , is , mono) , sim
  where
    is : InteractionStr ‚ÑÇ
    is = (Œª _ ‚Üí Unit) , (Œª _ ‚Üí ùîπ) , Œª {x = xs} b ‚Üí xs ‚å¢ b
    mono : HasMonotonicity cantor-poset is
    mono a b c = [] ‚å¢ c , refl
    sim : HasSimulation (cantor-poset , is , mono)
    sim xs ys xs‚â§ys@([] , p)     tt = tt , (Œª c‚ÇÄ ‚Üí c‚ÇÄ , ([] , (cong (Œª - ‚Üí - ‚å¢ c‚ÇÄ) p)))
    sim [] ys xs‚â§ys@(zs ‚å¢ z , p) tt = tt , ‚ä•-elim (lemma2 (ys ++ zs) z (sym p))
    sim (xs ‚å¢ x) ys xs‚â§ys@(zs ‚å¢ z , p) tt = tt , NTS
      where
        IH : (c‚ÇÄ : ùîπ) ‚Üí Œ£[ c ‚àà ùîπ ] (xs ‚å¢ c‚ÇÄ) ‚â§ (ys ‚å¢ c) is-true
        IH = œÄ‚ÇÅ (sim xs ys (zs , lemma xs (ys ++ zs) x z p) tt)
        NTS : (c‚ÇÄ : ùîπ) ‚Üí Œ£[ c ‚àà ùîπ ] (xs ‚å¢ x ‚å¢ c‚ÇÄ) ‚â§ (ys ‚å¢ c) is-true
        NTS c‚ÇÄ = head (zs ‚å¢ z) tt , subst (Œª - ‚Üí ((- ‚å¢ c‚ÇÄ) ‚â§ (ys ‚å¢ head (zs ‚å¢ z) tt)) is-true) (sym p) NTS‚Ä≤
          where
            NTS‚Ä≤ : ((ys ++ zs) ‚å¢ z ‚å¢ c‚ÇÄ) ‚â§ (ys ‚å¢ head (zs ‚å¢ z) tt) is-true
            NTS‚Ä≤ = ((tail (zs ‚å¢ z) tt) ‚å¢ c‚ÇÄ) , rem
              where
                rem : (ys ++ zs) ‚å¢ z ‚å¢ c‚ÇÄ ‚â° ((ys ‚å¢ head (zs ‚å¢ z) tt) ++ (tail (zs ‚å¢ z) tt ‚å¢ c‚ÇÄ))
                rem = (ys ++ zs) ‚å¢ z ‚å¢ c‚ÇÄ      ‚â°‚ü® refl ‚ü©
                      (ys ++ (zs ‚å¢ z)) ‚å¢ c‚ÇÄ    ‚â°‚ü® refl ‚ü©
                      ys ++ ((zs ‚å¢ z) ‚å¢ c‚ÇÄ)    ‚â°‚ü® cong (Œª - ‚Üí ys ++ (- ‚å¢ c‚ÇÄ)) (sym (hd-tl-lemma (zs ‚å¢ z) tt)) ‚ü©
                      (ys ++ (([] ‚å¢ (head (zs ‚å¢ z) tt)) ++ (tail (zs ‚å¢ z) tt))) ‚å¢ c‚ÇÄ ‚â°‚ü® cong (Œª - ‚Üí - ‚å¢ c‚ÇÄ) (sym (snoc-lemma ys (tail (zs ‚å¢ z) tt) (head (zs ‚å¢ z) tt))) ‚ü©
                      ((ys ‚å¢ head (zs ‚å¢ z) tt) ++ tail (zs ‚å¢ z) tt) ‚å¢ c‚ÇÄ ‚àé
